"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const uuid_1 = require("uuid");
const ws_1 = __importDefault(require("ws"));
class Voicea {
    constructor(token, meeting, sessionID) {
        var _a, _b;
        const runtime = ((_b = (_a = global.process) === null || _a === void 0 ? void 0 : _a.release) === null || _b === void 0 ? void 0 : _b.name) || 'not node';
        this.meeting = meeting;
        this.token = token;
        this.sessionID = sessionID;
        this.socket = {};
        this.isNode = runtime === 'node';
    }
    generateSocketUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            const { deviceUrl, locusInfo: { info: { datachannelUrl } } } = this.meeting;
            let url = '';
            try {
                const response = yield axios_1.default({
                    method: 'post',
                    url: datachannelUrl,
                    data: { deviceUrl },
                    headers: { 'Authorization': `Bearer ${this.token}` }
                });
                const { data: { webSocketUrl } } = response;
                url = `${webSocketUrl}?outboundWireFormat=text&bufferStates=true&aliasHttpStatus=true`;
            }
            catch (error) {
                console.log(`request web socket url ${error.message}`);
            }
            return url;
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            const register = () => {
                this.socket.send(JSON.stringify({
                    id: uuid_1.v4(),
                    type: 'authorization',
                    data: { "token": `Bearer ${this.token}` },
                    trackingId: this.sessionID + Date.now().toString()
                }));
            };
            if (this.isNode) {
                this.socket = new ws_1.default(yield this.generateSocketUrl());
                this.socket.on('open', () => {
                    register();
                });
            }
            else {
                //@ts-ignore: Cannot find name 'WebSocket'.
                this.socket = new WebSocket(yield this.generateSocketUrl());
                this.socket.onopen = () => {
                    register();
                };
            }
        });
    }
    getCurrentSpeaker(csis) {
        return Object.values(this.meeting.members.membersCollection.members).find((member) => {
            const memberCSIs = member.participant.status.csis;
            let selfIsSpeaking = false;
            for (const csi of csis) {
                if (memberCSIs.includes(csi)) {
                    selfIsSpeaking = true;
                    break;
                }
            }
            return selfIsSpeaking;
        });
    }
    getTranscription(callback) {
        const sendTranscription = (event) => {
            var _a, _b, _c, _d, _e, _f;
            let messageData, csis, speaker, message;
            messageData = this.isNode ? JSON.parse(event) : JSON.parse(event.data);
            csis = ((_b = (_a = messageData.data) === null || _a === void 0 ? void 0 : _a.voiceaPayload) === null || _b === void 0 ? void 0 : _b.csis) || [];
            speaker = this.getCurrentSpeaker(csis);
            message = ((_d = (_c = messageData.data) === null || _c === void 0 ? void 0 : _c.voiceaPayload) === null || _d === void 0 ? void 0 : _d.data) || "";
            this.socket.send(JSON.stringify({ "messageId": messageData.id, "type": "ack" }));
            callback({ speaker: speaker === null || speaker === void 0 ? void 0 : speaker.name, message, type: (_f = (_e = messageData.data) === null || _e === void 0 ? void 0 : _e.voiceaPayload) === null || _f === void 0 ? void 0 : _f.type });
        };
        if (this.isNode) {
            this.socket.on('message', (event) => {
                sendTranscription(event);
            });
        }
        else {
            this.socket.onmessage = (event) => {
                sendTranscription(event);
            };
        }
    }
    closeSocket() {
        if (this.isNode) {
            this.socket.on('close', (event) => {
                console.log('Socket has closed', event);
            });
        }
        else {
            this.socket.onclose = (event) => {
                console.log('Socket has closed.', event);
            };
        }
    }
}
exports.default = Voicea;
//# sourceMappingURL=voicea.js.map